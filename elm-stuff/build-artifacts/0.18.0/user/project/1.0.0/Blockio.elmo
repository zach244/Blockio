var _user$project$Blockio$walls = function (model) {
	if (_elm_lang$core$Native_Utils.cmp(1400, model.blockio.x) < 1) {
		var b = model.blockio;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				blockio: _elm_lang$core$Native_Utils.update(
					b,
					{x: 1400})
			});
	} else {
		if (_elm_lang$core$Native_Utils.cmp(-1400, model.blockio.x) > -1) {
			var b = model.blockio;
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					blockio: _elm_lang$core$Native_Utils.update(
						b,
						{x: -1400})
				});
		} else {
			return model;
		}
	}
};
var _user$project$Blockio$spikeGroundCollision = function (model) {
	if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 490) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 520) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
		var b = model.blockio;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				blockio: _elm_lang$core$Native_Utils.update(
					b,
					{x: 0, y: 0, lives: model.blockio.lives - 1})
			});
	} else {
		if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 520) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 550) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
			var b = model.blockio;
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					blockio: _elm_lang$core$Native_Utils.update(
						b,
						{x: 0, y: 0, lives: model.blockio.lives - 1})
				});
		} else {
			if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 460) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 490) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
				var b = model.blockio;
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						blockio: _elm_lang$core$Native_Utils.update(
							b,
							{x: 0, y: 0, lives: model.blockio.lives - 1})
					});
			} else {
				if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 430) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 460) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
					var b = model.blockio;
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							blockio: _elm_lang$core$Native_Utils.update(
								b,
								{x: 0, y: 0, lives: model.blockio.lives - 1})
						});
				} else {
					if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 100) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 130) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
						var b = model.blockio;
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								blockio: _elm_lang$core$Native_Utils.update(
									b,
									{x: 0, y: 0, lives: model.blockio.lives - 1})
							});
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 130) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 160) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
							var b = model.blockio;
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									blockio: _elm_lang$core$Native_Utils.update(
										b,
										{x: 0, y: 0, lives: model.blockio.lives - 1})
								});
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 160) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 190) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
								var b = model.blockio;
								return _elm_lang$core$Native_Utils.update(
									model,
									{
										blockio: _elm_lang$core$Native_Utils.update(
											b,
											{x: 0, y: 0, lives: model.blockio.lives - 1})
									});
							} else {
								if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 190) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 220) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
									var b = model.blockio;
									return _elm_lang$core$Native_Utils.update(
										model,
										{
											blockio: _elm_lang$core$Native_Utils.update(
												b,
												{x: 0, y: 0, lives: model.blockio.lives - 1})
										});
								} else {
									if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 930) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 960) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
										var b = model.blockio;
										return _elm_lang$core$Native_Utils.update(
											model,
											{
												blockio: _elm_lang$core$Native_Utils.update(
													b,
													{x: 0, y: 0, lives: model.blockio.lives - 1})
											});
									} else {
										if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 960) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 990) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
											var b = model.blockio;
											return _elm_lang$core$Native_Utils.update(
												model,
												{
													blockio: _elm_lang$core$Native_Utils.update(
														b,
														{x: 0, y: 0, lives: model.blockio.lives - 1})
												});
										} else {
											if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 990) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 1020) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
												var b = model.blockio;
												return _elm_lang$core$Native_Utils.update(
													model,
													{
														blockio: _elm_lang$core$Native_Utils.update(
															b,
															{x: 0, y: 0, lives: model.blockio.lives - 1})
													});
											} else {
												if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 1020) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 1050) < 1) && _elm_lang$core$Native_Utils.eq(model.blockio.y, 0))) {
													var b = model.blockio;
													return _elm_lang$core$Native_Utils.update(
														model,
														{
															blockio: _elm_lang$core$Native_Utils.update(
																b,
																{x: 0, y: 0, lives: model.blockio.lives - 1})
														});
												} else {
													if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 100) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 130) < 1) && (_elm_lang$core$Native_Utils.cmp(model.blockio.y, 55) > -1))) {
														var b = model.blockio;
														return _elm_lang$core$Native_Utils.update(
															model,
															{
																blockio: _elm_lang$core$Native_Utils.update(
																	b,
																	{x: 0, y: 0, lives: model.blockio.lives - 1})
															});
													} else {
														if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 520) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 550) < 1) && (_elm_lang$core$Native_Utils.cmp(model.blockio.y, 55) > -1))) {
															var b = model.blockio;
															return _elm_lang$core$Native_Utils.update(
																model,
																{
																	blockio: _elm_lang$core$Native_Utils.update(
																		b,
																		{x: 0, y: 0, lives: model.blockio.lives - 1})
																});
														} else {
															if ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 990) > -1) && ((_elm_lang$core$Native_Utils.cmp(model.blockio.x, 1020) < 1) && (_elm_lang$core$Native_Utils.cmp(model.blockio.y, 55) > -1))) {
																var b = model.blockio;
																return _elm_lang$core$Native_Utils.update(
																	model,
																	{
																		blockio: _elm_lang$core$Native_Utils.update(
																			b,
																			{x: 0, y: 0, lives: model.blockio.lives - 1})
																	});
															} else {
																return model;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Blockio$floor = function (model) {
	if (_elm_lang$core$Native_Utils.cmp(model.blockio.y, 0) < 0) {
		var b = model.blockio;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				blockio: _elm_lang$core$Native_Utils.update(
					b,
					{y: 0, vy: 0})
			});
	} else {
		return model;
	}
};
var _user$project$Blockio$acceleration = function (model) {
	var b = model.blockio;
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			blockio: _elm_lang$core$Native_Utils.update(
				b,
				{vx: model.blockio.blockioAcceleration})
		});
};
var _user$project$Blockio$motion = function (model) {
	var b = model.blockio;
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			blockio: _elm_lang$core$Native_Utils.update(
				b,
				{x: model.blockio.x + model.blockio.vx, y: model.blockio.y + model.blockio.vy})
		});
};
var _user$project$Blockio$stop = F2(
	function (condition, model) {
		if (A2(condition, model.blockio.blockioAcceleration, 0)) {
			var b = model.blockio;
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					blockio: _elm_lang$core$Native_Utils.update(
						b,
						{blockioAcceleration: 0})
				});
		} else {
			return model;
		}
	});
var _user$project$Blockio$fastFall = F2(
	function (moveSpeed, model) {
		var b = model.blockio;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				blockio: _elm_lang$core$Native_Utils.update(
					b,
					{vy: model.blockio.vy - moveSpeed})
			});
	});
var _user$project$Blockio$run = F2(
	function (moveSpeed, model) {
		var b = model.blockio;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				blockio: _elm_lang$core$Native_Utils.update(
					b,
					{blockioAcceleration: moveSpeed})
			});
	});
var _user$project$Blockio$jumpSpeed = 5;
var _user$project$Blockio$jump = function (model) {
	if (_elm_lang$core$Native_Utils.eq(model.blockio.vy, 0)) {
		var b = model.blockio;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				blockio: _elm_lang$core$Native_Utils.update(
					b,
					{vy: _user$project$Blockio$jumpSpeed})
			});
	} else {
		return model;
	}
};
var _user$project$Blockio$gravityS = 0.2;
var _user$project$Blockio$gravity = function (model) {
	var b = model.blockio;
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			blockio: _elm_lang$core$Native_Utils.update(
				b,
				{vy: model.blockio.vy - _user$project$Blockio$gravityS})
		});
};
var _user$project$Blockio$runSpeed = 10;
var _user$project$Blockio$key = F2(
	function (msg, model) {
		return function () {
			var _p0 = msg;
			_v0_6:
			do {
				if (_p0.ctor === 'KeyUp') {
					switch (_p0._0) {
						case 65:
							return _user$project$Blockio$stop(
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
									}));
						case 68:
							return _user$project$Blockio$stop(
								F2(
									function (x, y) {
										return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
									}));
						default:
							break _v0_6;
					}
				} else {
					switch (_p0._0) {
						case 87:
							return _user$project$Blockio$jump;
						case 65:
							return _user$project$Blockio$run(0 - _user$project$Blockio$runSpeed);
						case 68:
							return _user$project$Blockio$run(_user$project$Blockio$runSpeed);
						case 83:
							return _user$project$Blockio$fastFall(3);
						default:
							break _v0_6;
					}
				}
			} while(false);
			return _elm_lang$core$Basics$identity;
		}()(model);
	});
var _user$project$Blockio$initialDoor = {centerX: -500, centerY: 0, bottomCornorX: 70, bottomCornorY: -70, topCornorX: 70, topCornorY: 70};
var _user$project$Blockio$initialKey = {centerX: 500, centerY: 0, bottomCornorX: -70, bottomCornorY: -70, topCornorX: -70, topCornorY: 70};
var _user$project$Blockio$initialBlockio = {x: 0, vx: 0, y: 0, vy: 0, blockioAcceleration: 0, lives: 3};
var _user$project$Blockio$Win = {ctor: 'Win'};
var _user$project$Blockio$HasKey = {ctor: 'HasKey'};
var _user$project$Blockio$doorCollide = function (model) {
	return (_elm_lang$core$Native_Utils.eq(model.blockio.x, 0) && _elm_lang$core$Native_Utils.eq(model.state, _user$project$Blockio$HasKey)) ? _elm_lang$core$Native_Utils.update(
		model,
		{state: _user$project$Blockio$Win}) : model;
};
var _user$project$Blockio$Dead = {ctor: 'Dead'};
var _user$project$Blockio$kill = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.blockio.lives, 0) ? _elm_lang$core$Native_Utils.update(
		model,
		{state: _user$project$Blockio$Dead}) : model;
};
var _user$project$Blockio$NoKey = {ctor: 'NoKey'};
var _user$project$Blockio$initialModel = {blockio: _user$project$Blockio$initialBlockio, key: _user$project$Blockio$initialKey, door: _user$project$Blockio$initialDoor, state: _user$project$Blockio$NoKey};
var _user$project$Blockio$getKey = function (model) {
	return (_elm_lang$core$Native_Utils.eq(model.blockio.x, 1400) && _elm_lang$core$Native_Utils.eq(model.state, _user$project$Blockio$NoKey)) ? _elm_lang$core$Native_Utils.update(
		model,
		{state: _user$project$Blockio$HasKey}) : model;
};
var _user$project$Blockio$tick = function (model) {
	return _user$project$Blockio$floor(
		_user$project$Blockio$walls(
			_user$project$Blockio$motion(
				_user$project$Blockio$gravity(
					_user$project$Blockio$acceleration(
						_user$project$Blockio$spikeGroundCollision(
							_user$project$Blockio$doorCollide(
								_user$project$Blockio$getKey(
									_user$project$Blockio$kill(model)))))))));
};
var _user$project$Blockio$update = F2(
	function (msg, model) {
		var _p1 = msg;
		if (_p1.ctor === 'KeyMsg') {
			return A2(_user$project$Blockio$key, _p1._0, model);
		} else {
			return _user$project$Blockio$tick(model);
		}
	});
var _user$project$Blockio$updateWithCommand = F2(
	function (msg, model) {
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Blockio$update, msg, model),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Blockio$view = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.state, _user$project$Blockio$NoKey) ? _evancz$elm_graphics$Element$toHtml(
		A3(
			_evancz$elm_graphics$Collage$collage,
			2000,
			500,
			{
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$moveY,
					model.blockio.y - 230,
					A2(
						_evancz$elm_graphics$Collage$moveX,
						model.blockio.x - 445,
						A2(
							_evancz$elm_graphics$Collage$filled,
							_elm_lang$core$Color$black,
							A2(_evancz$elm_graphics$Collage$rect, 25, 25)))),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$elm_graphics$Collage$moveY,
						-250,
						A2(
							_evancz$elm_graphics$Collage$filled,
							_elm_lang$core$Color$black,
							A2(_evancz$elm_graphics$Collage$rect, 2000, 20))),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$elm_graphics$Collage$moveY,
							-200,
							A2(
								_evancz$elm_graphics$Collage$moveX,
								-950,
								_evancz$elm_graphics$Collage$toForm(
									A3(_evancz$elm_graphics$Element$image, 100, 100, 'Door.png')))),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$elm_graphics$Collage$moveY,
								-200,
								A2(
									_evancz$elm_graphics$Collage$moveX,
									950,
									_evancz$elm_graphics$Collage$toForm(
										A3(_evancz$elm_graphics$Element$image, 100, 100, 'Key.png')))),
							_1: {
								ctor: '::',
								_0: A2(
									_evancz$elm_graphics$Collage$rotate,
									_elm_lang$core$Basics$degrees(330),
									A2(
										_evancz$elm_graphics$Collage$moveY,
										-245,
										A2(
											_evancz$elm_graphics$Collage$moveX,
											0,
											A2(
												_evancz$elm_graphics$Collage$filled,
												_elm_lang$core$Color$black,
												A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
								_1: {
									ctor: '::',
									_0: A2(
										_evancz$elm_graphics$Collage$rotate,
										_elm_lang$core$Basics$degrees(330),
										A2(
											_evancz$elm_graphics$Collage$moveY,
											-245,
											A2(
												_evancz$elm_graphics$Collage$moveX,
												30,
												A2(
													_evancz$elm_graphics$Collage$filled,
													_elm_lang$core$Color$black,
													A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
									_1: {
										ctor: '::',
										_0: A2(
											_evancz$elm_graphics$Collage$rotate,
											_elm_lang$core$Basics$degrees(330),
											A2(
												_evancz$elm_graphics$Collage$moveY,
												-245,
												A2(
													_evancz$elm_graphics$Collage$moveX,
													60,
													A2(
														_evancz$elm_graphics$Collage$filled,
														_elm_lang$core$Color$black,
														A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
										_1: {
											ctor: '::',
											_0: A2(
												_evancz$elm_graphics$Collage$rotate,
												_elm_lang$core$Basics$degrees(330),
												A2(
													_evancz$elm_graphics$Collage$moveY,
													-245,
													A2(
														_evancz$elm_graphics$Collage$moveX,
														90,
														A2(
															_evancz$elm_graphics$Collage$filled,
															_elm_lang$core$Color$black,
															A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
											_1: {
												ctor: '::',
												_0: A2(
													_evancz$elm_graphics$Collage$rotate,
													_elm_lang$core$Basics$degrees(330),
													A2(
														_evancz$elm_graphics$Collage$moveY,
														-245,
														A2(
															_evancz$elm_graphics$Collage$moveX,
															-330,
															A2(
																_evancz$elm_graphics$Collage$filled,
																_elm_lang$core$Color$black,
																A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
												_1: {
													ctor: '::',
													_0: A2(
														_evancz$elm_graphics$Collage$rotate,
														_elm_lang$core$Basics$degrees(330),
														A2(
															_evancz$elm_graphics$Collage$moveY,
															-245,
															A2(
																_evancz$elm_graphics$Collage$moveX,
																-300,
																A2(
																	_evancz$elm_graphics$Collage$filled,
																	_elm_lang$core$Color$black,
																	A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
													_1: {
														ctor: '::',
														_0: A2(
															_evancz$elm_graphics$Collage$rotate,
															_elm_lang$core$Basics$degrees(330),
															A2(
																_evancz$elm_graphics$Collage$moveY,
																-245,
																A2(
																	_evancz$elm_graphics$Collage$moveX,
																	-270,
																	A2(
																		_evancz$elm_graphics$Collage$filled,
																		_elm_lang$core$Color$black,
																		A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
														_1: {
															ctor: '::',
															_0: A2(
																_evancz$elm_graphics$Collage$rotate,
																_elm_lang$core$Basics$degrees(330),
																A2(
																	_evancz$elm_graphics$Collage$moveY,
																	-245,
																	A2(
																		_evancz$elm_graphics$Collage$moveX,
																		-240,
																		A2(
																			_evancz$elm_graphics$Collage$filled,
																			_elm_lang$core$Color$black,
																			A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
															_1: {
																ctor: '::',
																_0: A2(
																	_evancz$elm_graphics$Collage$rotate,
																	_elm_lang$core$Basics$degrees(330),
																	A2(
																		_evancz$elm_graphics$Collage$moveY,
																		-245,
																		A2(
																			_evancz$elm_graphics$Collage$moveX,
																			500,
																			A2(
																				_evancz$elm_graphics$Collage$filled,
																				_elm_lang$core$Color$black,
																				A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_evancz$elm_graphics$Collage$rotate,
																		_elm_lang$core$Basics$degrees(330),
																		A2(
																			_evancz$elm_graphics$Collage$moveY,
																			-245,
																			A2(
																				_evancz$elm_graphics$Collage$moveX,
																				530,
																				A2(
																					_evancz$elm_graphics$Collage$filled,
																					_elm_lang$core$Color$black,
																					A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_evancz$elm_graphics$Collage$rotate,
																			_elm_lang$core$Basics$degrees(330),
																			A2(
																				_evancz$elm_graphics$Collage$moveY,
																				-245,
																				A2(
																					_evancz$elm_graphics$Collage$moveX,
																					560,
																					A2(
																						_evancz$elm_graphics$Collage$filled,
																						_elm_lang$core$Color$black,
																						A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_evancz$elm_graphics$Collage$rotate,
																				_elm_lang$core$Basics$degrees(330),
																				A2(
																					_evancz$elm_graphics$Collage$moveY,
																					-245,
																					A2(
																						_evancz$elm_graphics$Collage$moveX,
																						590,
																						A2(
																							_evancz$elm_graphics$Collage$filled,
																							_elm_lang$core$Color$black,
																							A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_evancz$elm_graphics$Collage$rotate,
																					_elm_lang$core$Basics$degrees(270),
																					A2(
																						_evancz$elm_graphics$Collage$moveY,
																						-150,
																						A2(
																							_evancz$elm_graphics$Collage$moveX,
																							-330,
																							A2(
																								_evancz$elm_graphics$Collage$filled,
																								_elm_lang$core$Color$black,
																								A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_evancz$elm_graphics$Collage$rotate,
																						_elm_lang$core$Basics$degrees(270),
																						A2(
																							_evancz$elm_graphics$Collage$moveY,
																							-150,
																							A2(
																								_evancz$elm_graphics$Collage$moveX,
																								90,
																								A2(
																									_evancz$elm_graphics$Collage$filled,
																									_elm_lang$core$Color$black,
																									A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_evancz$elm_graphics$Collage$rotate,
																							_elm_lang$core$Basics$degrees(270),
																							A2(
																								_evancz$elm_graphics$Collage$moveY,
																								-150,
																								A2(
																									_evancz$elm_graphics$Collage$moveX,
																									560,
																									A2(
																										_evancz$elm_graphics$Collage$filled,
																										_elm_lang$core$Color$black,
																										A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																						_1: {
																							ctor: '::',
																							_0: _evancz$elm_graphics$Collage$toForm(
																								_evancz$elm_graphics$Element$centered(
																									_evancz$elm_graphics$Text$fromString('Press W,A,S,D to control Blockio'))),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			})) : (_elm_lang$core$Native_Utils.eq(model.state, _user$project$Blockio$HasKey) ? _evancz$elm_graphics$Element$toHtml(
		A3(
			_evancz$elm_graphics$Collage$collage,
			2000,
			500,
			{
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$moveY,
					model.blockio.y - 230,
					A2(
						_evancz$elm_graphics$Collage$moveX,
						model.blockio.x - 445,
						A2(
							_evancz$elm_graphics$Collage$filled,
							_elm_lang$core$Color$black,
							A2(_evancz$elm_graphics$Collage$rect, 25, 25)))),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$elm_graphics$Collage$moveY,
						-250,
						A2(
							_evancz$elm_graphics$Collage$filled,
							_elm_lang$core$Color$black,
							A2(_evancz$elm_graphics$Collage$rect, 2000, 20))),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$elm_graphics$Collage$moveY,
							-200,
							A2(
								_evancz$elm_graphics$Collage$moveX,
								-950,
								_evancz$elm_graphics$Collage$toForm(
									A3(_evancz$elm_graphics$Element$image, 100, 100, 'Door.png')))),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$elm_graphics$Collage$rotate,
								_elm_lang$core$Basics$degrees(330),
								A2(
									_evancz$elm_graphics$Collage$moveY,
									-245,
									A2(
										_evancz$elm_graphics$Collage$moveX,
										0,
										A2(
											_evancz$elm_graphics$Collage$filled,
											_elm_lang$core$Color$black,
											A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
							_1: {
								ctor: '::',
								_0: A2(
									_evancz$elm_graphics$Collage$rotate,
									_elm_lang$core$Basics$degrees(330),
									A2(
										_evancz$elm_graphics$Collage$moveY,
										-245,
										A2(
											_evancz$elm_graphics$Collage$moveX,
											30,
											A2(
												_evancz$elm_graphics$Collage$filled,
												_elm_lang$core$Color$black,
												A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
								_1: {
									ctor: '::',
									_0: A2(
										_evancz$elm_graphics$Collage$rotate,
										_elm_lang$core$Basics$degrees(330),
										A2(
											_evancz$elm_graphics$Collage$moveY,
											-245,
											A2(
												_evancz$elm_graphics$Collage$moveX,
												60,
												A2(
													_evancz$elm_graphics$Collage$filled,
													_elm_lang$core$Color$black,
													A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
									_1: {
										ctor: '::',
										_0: A2(
											_evancz$elm_graphics$Collage$rotate,
											_elm_lang$core$Basics$degrees(330),
											A2(
												_evancz$elm_graphics$Collage$moveY,
												-245,
												A2(
													_evancz$elm_graphics$Collage$moveX,
													90,
													A2(
														_evancz$elm_graphics$Collage$filled,
														_elm_lang$core$Color$black,
														A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
										_1: {
											ctor: '::',
											_0: A2(
												_evancz$elm_graphics$Collage$rotate,
												_elm_lang$core$Basics$degrees(330),
												A2(
													_evancz$elm_graphics$Collage$moveY,
													-245,
													A2(
														_evancz$elm_graphics$Collage$moveX,
														-330,
														A2(
															_evancz$elm_graphics$Collage$filled,
															_elm_lang$core$Color$black,
															A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
											_1: {
												ctor: '::',
												_0: A2(
													_evancz$elm_graphics$Collage$rotate,
													_elm_lang$core$Basics$degrees(330),
													A2(
														_evancz$elm_graphics$Collage$moveY,
														-245,
														A2(
															_evancz$elm_graphics$Collage$moveX,
															-300,
															A2(
																_evancz$elm_graphics$Collage$filled,
																_elm_lang$core$Color$black,
																A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
												_1: {
													ctor: '::',
													_0: A2(
														_evancz$elm_graphics$Collage$rotate,
														_elm_lang$core$Basics$degrees(330),
														A2(
															_evancz$elm_graphics$Collage$moveY,
															-245,
															A2(
																_evancz$elm_graphics$Collage$moveX,
																-270,
																A2(
																	_evancz$elm_graphics$Collage$filled,
																	_elm_lang$core$Color$black,
																	A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
													_1: {
														ctor: '::',
														_0: A2(
															_evancz$elm_graphics$Collage$rotate,
															_elm_lang$core$Basics$degrees(330),
															A2(
																_evancz$elm_graphics$Collage$moveY,
																-245,
																A2(
																	_evancz$elm_graphics$Collage$moveX,
																	-240,
																	A2(
																		_evancz$elm_graphics$Collage$filled,
																		_elm_lang$core$Color$black,
																		A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
														_1: {
															ctor: '::',
															_0: A2(
																_evancz$elm_graphics$Collage$rotate,
																_elm_lang$core$Basics$degrees(330),
																A2(
																	_evancz$elm_graphics$Collage$moveY,
																	-245,
																	A2(
																		_evancz$elm_graphics$Collage$moveX,
																		500,
																		A2(
																			_evancz$elm_graphics$Collage$filled,
																			_elm_lang$core$Color$black,
																			A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
															_1: {
																ctor: '::',
																_0: A2(
																	_evancz$elm_graphics$Collage$rotate,
																	_elm_lang$core$Basics$degrees(330),
																	A2(
																		_evancz$elm_graphics$Collage$moveY,
																		-245,
																		A2(
																			_evancz$elm_graphics$Collage$moveX,
																			530,
																			A2(
																				_evancz$elm_graphics$Collage$filled,
																				_elm_lang$core$Color$black,
																				A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_evancz$elm_graphics$Collage$rotate,
																		_elm_lang$core$Basics$degrees(330),
																		A2(
																			_evancz$elm_graphics$Collage$moveY,
																			-245,
																			A2(
																				_evancz$elm_graphics$Collage$moveX,
																				560,
																				A2(
																					_evancz$elm_graphics$Collage$filled,
																					_elm_lang$core$Color$black,
																					A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_evancz$elm_graphics$Collage$rotate,
																			_elm_lang$core$Basics$degrees(330),
																			A2(
																				_evancz$elm_graphics$Collage$moveY,
																				-245,
																				A2(
																					_evancz$elm_graphics$Collage$moveX,
																					590,
																					A2(
																						_evancz$elm_graphics$Collage$filled,
																						_elm_lang$core$Color$black,
																						A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_evancz$elm_graphics$Collage$rotate,
																				_elm_lang$core$Basics$degrees(270),
																				A2(
																					_evancz$elm_graphics$Collage$moveY,
																					-150,
																					A2(
																						_evancz$elm_graphics$Collage$moveX,
																						-330,
																						A2(
																							_evancz$elm_graphics$Collage$filled,
																							_elm_lang$core$Color$black,
																							A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_evancz$elm_graphics$Collage$rotate,
																					_elm_lang$core$Basics$degrees(270),
																					A2(
																						_evancz$elm_graphics$Collage$moveY,
																						-150,
																						A2(
																							_evancz$elm_graphics$Collage$moveX,
																							90,
																							A2(
																								_evancz$elm_graphics$Collage$filled,
																								_elm_lang$core$Color$black,
																								A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_evancz$elm_graphics$Collage$rotate,
																						_elm_lang$core$Basics$degrees(270),
																						A2(
																							_evancz$elm_graphics$Collage$moveY,
																							-150,
																							A2(
																								_evancz$elm_graphics$Collage$moveX,
																								560,
																								A2(
																									_evancz$elm_graphics$Collage$filled,
																									_elm_lang$core$Color$black,
																									A2(_evancz$elm_graphics$Collage$ngon, 3, 15))))),
																					_1: {
																						ctor: '::',
																						_0: _evancz$elm_graphics$Collage$toForm(
																							_evancz$elm_graphics$Element$centered(
																								_evancz$elm_graphics$Text$fromString('Press W,A,S,D to control Blockio'))),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			})) : (_elm_lang$core$Native_Utils.eq(model.state, _user$project$Blockio$Win) ? _evancz$elm_graphics$Element$toHtml(
		A3(
			_evancz$elm_graphics$Collage$collage,
			2000,
			500,
			{
				ctor: '::',
				_0: _evancz$elm_graphics$Collage$toForm(
					_evancz$elm_graphics$Element$centered(
						_evancz$elm_graphics$Text$fromString('You Won!!! Theres nothing left'))),
				_1: {ctor: '[]'}
			})) : _evancz$elm_graphics$Element$toHtml(
		A3(
			_evancz$elm_graphics$Collage$collage,
			2000,
			500,
			{
				ctor: '::',
				_0: _evancz$elm_graphics$Collage$toForm(
					_evancz$elm_graphics$Element$centered(
						_evancz$elm_graphics$Text$fromString('Game Over!!!'))),
				_1: {ctor: '[]'}
			}))));
};
var _user$project$Blockio$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Blockio$KeyMsg = function (a) {
	return {ctor: 'KeyMsg', _0: a};
};
var _user$project$Blockio$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Blockio$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Blockio$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$keyboard$Keyboard$downs(
				function (_p2) {
					return _user$project$Blockio$KeyMsg(
						_user$project$Blockio$KeyDown(_p2));
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$ups(
					function (_p3) {
						return _user$project$Blockio$KeyMsg(
							_user$project$Blockio$KeyUp(_p3));
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Blockio$Tick),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Blockio$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Blockio$initialModel, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Blockio$view,
		subscriptions: _user$project$Blockio$subscriptions,
		update: _user$project$Blockio$updateWithCommand
	})();
